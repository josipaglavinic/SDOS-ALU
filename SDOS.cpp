//ADD,ADC,AND,IOR,XOR,MOV,SUB,SBC (.W) A,d8(,m)
//ADD,ADC,AND,IOR,XOR,MOV,SUB,SBC (.W) d8,#i8/#i16
//ADD,ADC,AND,IOR,XOR,MOV,SUB,SBC (.W) d8,d16


int16_t ADD16(int16_t *x, int16_t *y) {
	int16_t(temp16_3) = *x;
	*x = *x + *y;

	if (*x == 0)
		*SR = *SR | Z_MASK;
	if ((((temp16_3 & 0b1111111111111111) + (*y & 0b1111111111111111)) & 0b10000000000000000) == 0b10000000000000000)
		*SR = *SR | C_MASK;
	if ((((temp16_3 & 0b0000000011111111) + (*y & 0b0000000011111111)) & 0b0000000100000000) == 0b0000000100000000)
		*SR = *SR | H_MASK;
	if ((*x & 0b1000000000000000) == 0b1000000000000000)
		*SR = *SR | S_MASK;
	if (((*y > 0) && (temp16_3 > 0) && (*x < 0)) || ((*y < 0) && (temp16_3 < 0) && (*x > 0)))
		*SR = *SR | O_MASK;

	return *x;
}

int16_t ADC16(int16_t *x, int16_t *y) {
	int16_t(temp16_3) = *x;
	if ((*SR & C_MASK) == C_MASK)
		*x = *x + *y + 1;
	else
		*x = *x + *y;

	if (*x == 0)
		*SR = *SR | Z_MASK;
	if ((((temp16_3 & 0b1111111111111111) + (*y & 0b1111111111111111)) & 0b10000000000000000) == 0b10000000000000000)
		*SR = *SR | C_MASK;
	if ((((temp16_3 & 0b0000000011111111) + (*y & 0b0000000011111111)) & 0b0000000100000000) == 0b0000000100000000)
		*SR = *SR | H_MASK;
	if ((*x & 0b1000000000000000) == 0b1000000000000000)
		*SR = *SR | S_MASK;
	if (((*y > 0) && (temp16_3 > 0) && (*x < 0)) || ((*y < 0) && (temp16_3 < 0) && (*x > 0)))
		*SR = *SR | O_MASK;

	return *x;
}

int16_t AND16(int16_t *x, int16_t *y) {
	*x = *x & *y;
	if (*x == 0)
		*SR = *SR | Z_MASK;

	return *x;
}
int16_t IOR16(int16_t *x, int16_t *y) {
	*x = *x | *y;
	if (*x == 0)
		*SR = *SR | Z_MASK;

	return *x;
}
int16_t XOR16(int16_t *x, int16_t *y) {
	*x = *x ^ *y;
	if (*x == 0)
		*SR = *SR | Z_MASK;

	return *x;
}
int16_t MOV16(int16_t *x, int16_t *y) {
	return *x = *y;
}

int16_t SUB16(int16_t *x, int16_t *y) {
		int16_t(temp16_3) = *x;
		*x = *x - *y;

		if (*x == 0)
			*SR = *SR | Z_MASK;
		if ((((temp16_3 & 0b1111111111111111) + (*y & 0b1111111111111111)) & 0b10000000000000000) == 0b10000000000000000)
			*SR = *SR | C_MASK;
		if ((((temp16_3 & 0b0000000011111111) + (*y & 0b0000000011111111)) & 0b0000000100000000) == 0b0000000100000000)
			*SR = *SR | H_MASK;
		if ((*x & 0b1000000000000000) == 0b1000000000000000)
			*SR = *SR | S_MASK;
		if (((*y > 0) && (temp16_3 > 0) && (*x < 0)) || ((*y < 0) && (temp16_3 < 0) && (*x > 0)))
			*SR = *SR | O_MASK;

		return *x;
	}

int16_t SBC16 (int16_t *x, int16_t *y) {
		int16_t(temp16_3) = *x;
		if ((*SR & C_MASK) == C_MASK)
			*x = *x - *y - 1;
		else
			*x = *x - *y;

		if (*x == 0)
			*SR = *SR | Z_MASK;
		if ((((temp16_3 & 0b1111111111111111) + (*y & 0b1111111111111111)) & 0b10000000000000000) == 0b10000000000000000)
			*SR = *SR | C_MASK;
		if ((((temp16_3 & 0b0000000011111111) + (*y & 0b0000000011111111)) & 0b0000000100000000) == 0b0000000100000000)
			*SR = *SR | H_MASK;
		if ((*x & 0b1000000000000000) == 0b1000000000000000)
			*SR = *SR | S_MASK;
		if (((*y > 0) && (temp16_3 > 0) && (*x < 0)) || ((*y < 0) && (temp16_3 < 0) && (*x > 0)))
			*SR = *SR | O_MASK;

		return *x;
	}

	//__ 8

int8_t ADD8(int16_t *x, int16_t *y) {
		int8_t(temp8_1) = int8_t(*x);
		int8_t(temp8_2) = int8_t(*y);

		int8_t(temp8_3) = temp8_1;
		temp8_1 = temp8_1 + temp8_2;

		if (temp8_1 == 0)
			*SR = *SR | Z_MASK;
		if ((((temp8_3 & 0b11111111) + (temp8_2 & 0b11111111)) & 0b100000000) == 0b100000000)
			*SR = *SR | C_MASK;
		if ((((temp8_3 & 0b00001111) + (temp8_2 & 0b00001111)) & 0b00010000) == 0b00010000)
			*SR = *SR | H_MASK;
		if ((temp8_1 & 0b10000000) == 0b10000000)
			*SR = *SR | S_MASK;
		if (((temp8_2 > 0) && (temp8_3 > 0) && (temp8_1 < 0)) || ((temp8_2 < 0) && (temp8_3 < 0) && (temp8_1 > 0)))
			*SR = *SR | O_MASK;

		return temp8_1;
	}

int8_t ADC8(int16_t *x, int16_t *y) {
		int8_t(temp8_1) = int8_t(*x);
		int8_t(temp8_2) = int8_t(*y);

		int8_t(temp8_3) = temp8_1;

		if ((*SR & C_MASK) == C_MASK)
			temp8_1 = temp8_1 + temp8_2 + 1;
		else
			temp8_1 = temp8_1 + temp8_2;

		if (temp8_1 == 0)
			*SR = *SR | Z_MASK;
		if ((((temp8_3 & 0b11111111) + (temp8_2 & 0b11111111)) & 0b100000000) == 0b100000000)
			*SR = *SR | C_MASK;
		if ((((temp8_3 & 0b00001111) + (temp8_2 & 0b00001111)) & 0b00010000) == 0b00010000)
			*SR = *SR | H_MASK;
		if ((temp8_1 & 0b10000000) == 0b10000000)
			*SR = *SR | S_MASK;
		if (((temp8_2 > 0) && (temp8_3 > 0) && (temp8_1 < 0)) || ((temp8_2 < 0) && (temp8_3 < 0) && (temp8_1 > 0)))
			*SR = *SR | O_MASK;

		return temp8_1;
	}

int8_t SUB8(int16_t *x, int16_t *y) {
		int8_t(temp8_1) = int8_t(*x);
		int8_t(temp8_2) = int8_t(*y);

		int8_t(temp8_3) = temp8_1;

		temp8_1 = temp8_1 + temp8_2;

		if (temp8_1 == 0)
			*SR = *SR | Z_MASK;
		if ((((temp8_3 & 0b11111111) + (temp8_2 & 0b11111111)) & 0b100000000) == 0b100000000)
			*SR = *SR | C_MASK;
		if ((((temp8_3 & 0b00001111) + (temp8_2 & 0b00001111)) & 0b00010000) == 0b00010000)
			*SR = *SR | H_MASK;
		if ((temp8_1 & 0b10000000) == 0b10000000)
			*SR = *SR | S_MASK;
		if (((temp8_2 > 0) && (temp8_3 > 0) && (temp8_1 < 0)) || ((temp8_2 < 0) && (temp8_3 < 0) && (temp8_1 > 0)))
			*SR = *SR | O_MASK;

		return temp8_1;
	}

int8_t SBC8(int16_t *x, int16_t *y) {
		int8_t(temp8_1) = int8_t(*x);
		int8_t(temp8_2) = int8_t(*y);

		int8_t(temp8_3) = temp8_1;
		temp8_1 = temp8_1 - temp8_2;

		if (*SR && C_MASK)
			temp8_1 = temp8_1 - temp8_2 - 1;
		else
			temp8_1 = temp8_1 - temp8_2;

		if (temp8_1 == 0)
			*SR = *SR | Z_MASK;
		if ((((temp8_3 & 0b11111111) + (temp8_2 & 0b11111111)) & 0b100000000) == 0b100000000)
			*SR = *SR | C_MASK;
		if ((((temp8_3 & 0b00001111) + (temp8_2 & 0b00001111)) & 0b00010000) == 0b00010000)
			*SR = *SR | H_MASK;
		if ((temp8_1 & 0b10000000) == 0b10000000)
			*SR = *SR | S_MASK;
		if (((temp8_2 > 0) && (temp8_3 > 0) && (temp8_1 < 0)) || ((temp8_2 < 0) && (temp8_3 < 0) && (temp8_1 > 0)))
			*SR = *SR | O_MASK;

		return temp8_1;
	}

	//ADD,ADC,AND,IOR,XOR,MOV,SUB,SBC (.W) A,d8(,m)

void call_F1_1() {
		if (skip == 0) {
			temp16_1 = IR & 0b0000000011111111; //0x00FF
			int16_t *p1 = (int16_t *)A;
			int16_t *p2 = (int16_t *)(dataMemory + temp16_1);

			if ((IR & 0b0001000000000000) == 0b0001000000000000) {
				int16_t *tp;
				tp = p1;
				p1 = p2;
				p2 = tp;
			}
			if ((IR & 0b0000000100000000) == 0b0000000100000000) {
				if ((IR & 0b0000111000000000) == 0b0000000000000000)
					*p1 = ADD16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000001000000000)
					*p1 = ADC16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000010000000000)
					*p1 = AND16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000011000000000)
					*p1 = IOR16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000100000000000)
					*p1 = XOR16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000101000000000)
					*p1 = MOV16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000110000000000)
					*p1 = SUB16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000111000000000)
					*p1 = SBC16(p1, p2);
			}
			else {
				if ((IR & 0b0000111000000000) == 0b0000000000000000)
					*p1 = ADD8(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000001000000000)
					*p1 = ADC8(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000010000000000)
					*p1 = AND16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000011000000000)
					*p1 = IOR16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000100000000000)
					*p1 = XOR16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000101000000000)
					*p1 = MOV16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000110000000000)
					*p1 = SUB8(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000111000000000)
					*p1 = SBC8(p1, p2);
			}
		}
		else {
			skip = 0;
			PC++;
		}

	}

	//ADD,ADC,AND,IOR,XOR,MOV,SUB,SBC (.W) d8,#i8/#i16

void call_F2_1() {
		if (skip == 0) {
			temp16_1 = IR & 0b0000000011111111; //0x00FF
			int16_t *p1 = (int16_t *)(dataMemory + temp16_1);
			temp16_2 = *(PC++);
			int16_t *p2;
			p2 = (int16_t *)&temp16_2;

			if ((IR & 0b0000000100000000) == 0b0000000100000000) {
				if ((IR & 0b0000111000000000) == 0b0000000000000000)
					*p1 = ADD16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000001000000000)
					*p1 = ADC16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000010000000000)
					*p1 = AND16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000011000000000)
					*p1 = IOR16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000100000000000)
					*p1 = XOR16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000101000000000)
					*p1 = MOV16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000110000000000)
					*p1 = SUB16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000111000000000)
					*p1 = SBC16(p1, p2);
			}
			else {
				if ((IR & 0b0000111000000000) == 0b0000000000000000)
					*p1 = ADD8(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000001000000000)
					*p1 = ADC8(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000010000000000)
					*p1 = AND16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000011000000000)
					*p1 = IOR16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000100000000000)
					*p1 = XOR16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000101000000000)
					*p1 = MOV16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000110000000000)
					*p1 = SUB8(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000111000000000)
					*p1 = SBC8(p1, p2);
			}
		}
		else {
			skip = 0;
			PC = PC + 2;

		}
}

	//ADD,ADC,AND,IOR,XOR,MOV,SUB,SBC (.W) d8,d16

void call_F4_01() {
		if (skip == 0) {
			temp16_1 = IR & 0b0000000011111111; //0x00FF
			int16_t *p1 = (int16_t *)(dataMemory + temp16_1);
			temp16_2 = *(PC++);
			int16_t *p2 = (int16_t *)(dataMemory + temp16_2);

			if ((IR & 0b0000000100000000) == 0b0000000100000000) {
				if ((IR & 0b0000111000000000) == 0b0000000000000000)
					ADD16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000001000000000)
					ADC16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000010000000000)
					AND16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000011000000000)
					IOR16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000100000000000)
					XOR16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000101000000000)
					MOV16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000110000000000)
					SUB16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000111000000000)
					SBC16(p1, p2);
			}
			else {
				if ((IR & 0b0000111000000000) == 0b0000000000000000)
					*p1 = ADD8(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000001000000000)
					*p1 = ADC8(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000010000000000)
					*p1 = AND16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000011000000000)
					*p1 = IOR16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000100000000000)
					*p1 = XOR16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000101000000000)
					*p1 = MOV16(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000110000000000)
					*p1 = SUB8(p1, p2);
				if ((IR & 0b0000111000000000) == 0b0000111000000000)
					*p1 = SBC8(p1, p2);
			}
		}
		else {
			skip = 0;
			PC = PC + 2;
		}
	}